{
	"name": "Log_and_monitor_pipline",
	"properties": {
		"description": "This pipline is used for creating log entry for process executed via API, monitoring it's progress and logging finish info.",
		"activities": [
			{
				"name": "Get_Initial_Info",
				"description": "Get information about running process from API",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set_Run_ID",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.adf_subscription_id}/resourceGroups/@{pipeline().globalParameters.adf_resource_group_name}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelineruns/@{variables('v_run_id')}?api-version=@{pipeline().globalParameters.adf_rest_api_version}",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://management.azure.com/"
					}
				}
			},
			{
				"name": "Set_Run_ID",
				"description": "Sets adf_run_id of monitored pipline",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "v_run_id",
					"value": {
						"value": "@pipeline().parameters.p_pipeline_run_id",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Repeat_until_finish",
				"description": "Repeat checking pipline until status is diffrent than In Progress",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Set_log_skid",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(equals(activity('Check_Status').output.status,'InProgress'))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Check_status",
							"description": "Check current status of run",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.adf_subscription_id}/resourceGroups/@{pipeline().globalParameters.adf_resource_group_name}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelineruns/@{variables('v_run_id')}?api-version=@{pipeline().globalParameters.adf_rest_api_version}",
									"type": "Expression"
								},
								"method": "GET",
								"authentication": {
									"type": "MSI",
									"resource": "https://management.azure.com/"
								}
							}
						},
						{
							"name": "Wait_Minute",
							"type": "Wait",
							"dependsOn": [
								{
									"activity": "Check_status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 15
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			},
			{
				"name": "Log_data_and_get_log_Id",
				"description": "Execute stored procedure to insert initial data in log table meta.aim_process_execution_log",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set_Annotation",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[meta].[p_insert_process_log]",
						"storedProcedureParameters": {
							"in_pipeline_name": {
								"type": "String",
								"value": {
									"value": "@activity('Get_Initial_Info').output.pipelineName",
									"type": "Expression"
								}
							},
							"in_pipeline_run_id": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.p_pipeline_run_id",
									"type": "Expression"
								}
							},
							"in_source": {
								"type": "String",
								"value": {
									"value": "@if(empty(variables('v_annotation')), ' ', activity('Get_Initial_Info').output.annotations[0])",
									"type": "Expression"
								}
							},
							"in_source_location": {
								"type": "String",
								"value": {
									"value": "@{activity('Get_Initial_Info').output.parameters?.p_stg_src_container_name}/@{activity('Get_Initial_Info').output.parameters?.p_stg_src_folder_name}/@{activity('Get_Initial_Info').output.parameters?.p_stg_src_file_name}",
									"type": "Expression"
								}
							},
							"in_source_SQL": {
								"type": "String",
								"value": {
									"value": "@activity('Get_Initial_Info').output.parameters?.p_src_sql",
									"type": "Expression"
								}
							},
							"in_start_time": {
								"type": "DateTime",
								"value": {
									"value": "@activity('Get_Initial_Info').output.runStart",
									"type": "Expression"
								}
							},
							"in_status": {
								"type": "String",
								"value": {
									"value": "@activity('Get_Initial_Info').output.status",
									"type": "Expression"
								}
							},
							"in_target": {
								"type": "String",
								"value": {
									"value": "@if(empty(variables('v_annotation')), ' ', activity('Get_Initial_Info').output.annotations[1])",
									"type": "Expression"
								}
							},
							"in_target_location": {
								"type": "String",
								"value": {
									"value": "@{activity('Get_Initial_Info').output?.parameters?.p_trgt_container_name}/@{activity('Get_Initial_Info').output.parameters?.p_trgt_folder_name}/@{activity('Get_Initial_Info').output.parameters?.p_trgt_file_name}",
									"type": "Expression"
								}
							},
							"in_tech_pipeline_run_id": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.p_tech_pipeline_run_id",
									"type": "Expression"
								}
							},
							"in_object_skid": {
								"type": "Int64",
								"value": {
									"value": "@pipeline().parameters.p_object_skid",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_metadata_db",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set_log_skid",
				"description": "Get id from current log entry",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Log_data_and_get_log_Id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "v_log_Id",
					"value": {
						"value": "@string(activity('Log_data_and_get_log_Id').output.firstRow.execution_skid)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Close_log_entry",
				"description": "Finish Logging by calculating duration and updating status",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Repeat_until_finish",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[meta].[p_update_process_log]",
					"storedProcedureParameters": {
						"in_end_time": {
							"value": {
								"value": "@activity('Check_status').output.runEnd\n",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"in_log_id": {
							"value": {
								"value": "@variables('v_log_Id')",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"in_status": {
							"value": {
								"value": "@{activity('Check_status').output.status}",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_AzureSQL_metadataDB",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set_Annotation",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get_Initial_Info",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "v_annotation",
					"value": {
						"value": "@activity('Get_Initial_Info').output.annotations",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"p_pipeline_run_id": {
				"type": "string"
			},
			"p_tech_pipeline_run_id": {
				"type": "string"
			},
			"p_object_skid": {
				"type": "string"
			}
		},
		"variables": {
			"v_run_id": {
				"type": "String"
			},
			"v_log_Id": {
				"type": "String"
			},
			"v_annotation": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "Framework/Logging/"
		},
		"annotations": [],
		"lastPublishTime": "2021-04-23T11:14:42Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}