{
	"name": "Standardization_Data_Flow_without_SKID_assignment_and_with_SCD",
	"properties": {
		"description": "Data Flow used for standardization of target object without SKID assignment process and with SCD.",
		"folder": {
			"name": "DataFlows/STD/"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm_parametrized",
						"type": "DatasetReference"
					},
					"name": "TargetObject",
					"description": "Get data from Target table"
				},
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm",
						"type": "DatasetReference"
					},
					"name": "InputDataForInsert"
				},
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm_parametrized",
						"type": "DatasetReference"
					},
					"name": "DimHist",
					"description": "Import data from selected Historical Table"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm_parametrized",
						"type": "DatasetReference"
					},
					"name": "TargetObjectInsertSink",
					"description": "Inset data to Target table"
				},
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm_parametrized",
						"type": "DatasetReference"
					},
					"name": "HistTable",
					"description": "Insert data to historical table"
				}
			],
			"transformations": [
				{
					"name": "HashTargetKeyColumns",
					"description": "Get hash values for target skid, non-key and key columns and create addtional output stream"
				},
				{
					"name": "HashInputKeyColumns"
				},
				{
					"name": "NewRows"
				},
				{
					"name": "RemapCurrentIndicator",
					"description": "Remap current indicator variable to selected column"
				},
				{
					"name": "AddTechnical",
					"description": "Calcuate new skid value and set metadata parameters"
				},
				{
					"name": "MarkForInsert"
				},
				{
					"name": "MarkUpdate"
				},
				{
					"name": "UpdateOrInsertSplit",
					"description": "Split records for update and insert"
				},
				{
					"name": "Update"
				},
				{
					"name": "FindDeletedRecords"
				},
				{
					"name": "ChangeCurrentFlag",
					"description": "Change current indicator variable to 0 because entry not exists on input"
				},
				{
					"name": "UpdateDimCurrentInd"
				},
				{
					"name": "CheckNonKeyColumnChange",
					"description": "Check if there was change in data "
				},
				{
					"name": "InsertToHistTable",
					"description": "Alter rows"
				},
				{
					"name": "UnionForHist"
				},
				{
					"name": "DimTable"
				},
				{
					"name": "UpdateTarget",
					"description": "Update target table"
				},
				{
					"name": "ActiveSplit",
					"description": "Split data based on activity flag"
				},
				{
					"name": "CheckIfExists",
					"description": "Check if data exists in new input"
				},
				{
					"name": "InsertActiveChnaged"
				},
				{
					"name": "AddProcessData"
				},
				{
					"name": "Select3",
					"description": "Remove technical columns"
				},
				{
					"name": "JoinToHist",
					"description": "Join to Historical table to get last valid_to date from previous entry"
				},
				{
					"name": "GetLastValidDate",
					"description": "Get max last end date for skid objects"
				},
				{
					"name": "SetValidFrom",
					"description": "Replace null date if no entry in historical table"
				},
				{
					"name": "JoinToHist2",
					"description": "Join to Historical table to get last valid_to date from previous entry"
				},
				{
					"name": "SetValidFrom2",
					"description": "Replace null date if no entry in historical table"
				},
				{
					"name": "CheckIfAlreadyInHist"
				},
				{
					"name": "InsertRemovedToHist"
				},
				{
					"name": "JoinToHist3",
					"description": "Join to Historical table to get last valid_to date from previous entry"
				},
				{
					"name": "RenameColumn",
					"description": "add suffix last for end date column"
				},
				{
					"name": "RenameActive",
					"description": "Remap current indicator variable to selected parameter"
				},
				{
					"name": "Remap1",
					"description": "Remap last valid date as new begining date"
				},
				{
					"name": "Remap2",
					"description": "Remap last valid date as new begining date"
				},
				{
					"name": "Remap3",
					"description": "Remap last valid date as new begining date"
				},
				{
					"name": "SetValidFrom3",
					"description": "Replace null date if no entry in historical table"
				},
				{
					"name": "RemoveTechnicalColumns"
				},
				{
					"name": "Select5"
				},
				{
					"name": "RemoveTechnicalColumn2"
				},
				{
					"name": "RemoveTechnicalColumnsFromSrc"
				}
			],
			"script": "parameters{\n\tdf_trgt_object_skid as integer,\n\tdf_trgt_key_column_list as string,\n\tdf_trgt_active_column_name as string,\n\tdf_trgt_non_key_column_list as string,\n\tdf_log_process_id as integer,\n\tdf_scd_begin_date_column_name as string,\n\tdf_scd_end_date_column_name as string,\n\tdf_std_sql_query as string,\n\tdf_log_process_date_column_name as string,\n\tdf_log_process_id_column_name as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TargetObject\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_COMMITTED',\n\tquery: ($df_std_sql_query),\n\tformat: 'query') ~> InputDataForInsert\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimHist\nAddProcessData derive(target_nonkey_columns_hash = md5(byNames(split($df_trgt_non_key_column_list,','))),\n\t\ttarget_key_column_hash = md5(byNames(split($df_trgt_key_column_list,',')))) ~> HashTargetKeyColumns\nInputDataForInsert derive(input_nonkey_columns_hash = md5(byNames(split($df_trgt_non_key_column_list,','))),\n\t\tinput_key_column_hash = md5(byNames(split($df_trgt_key_column_list,',')))) ~> HashInputKeyColumns\nHashInputKeyColumns, HashTargetKeyColumns exists(input_nonkey_columns_hash == target_nonkey_columns_hash\n\t&& input_key_column_hash == target_key_column_hash\n\t&& '1' == byName($df_trgt_active_column_name),\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRows\nAddTechnical select(mapColumn(\n\t\teach(match(name=='curr_ind'),\n\t\t\t$df_trgt_active_column_name = $$),\n\t\teach(match(name=='valid_to'),\n\t\t\t$df_scd_end_date_column_name = $$),\n\t\teach(match(name=='process_date'),\n\t\t\t$df_log_process_date_column_name = $$),\n\t\teach(match(name=='process_id'),\n\t\t\t$df_log_process_id_column_name = $$),\n\t\teach(match(!in(['max_surrogate_key','skid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemapCurrentIndicator\nSelect3 derive(valid_to = toTimestamp('9999-01-01 00:00:00'),\n\t\tprocess_date = currentTimestamp(),\n\t\tprocess_id = $df_log_process_id,\n\t\tcurr_ind = 1) ~> AddTechnical\nUpdateOrInsertSplit@Insert alterRow(insertIf(true())) ~> MarkForInsert\nNewRows, HashTargetKeyColumns join(input_key_column_hash == target_key_column_hash,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> MarkUpdate\nRemapCurrentIndicator split(isNull(target_key_column_hash),\n\tdisjoint: false) ~> UpdateOrInsertSplit@(Insert, Update)\nSelect5 alterRow(updateIf(true())) ~> Update\nHashTargetKeyColumns, HashInputKeyColumns exists(target_key_column_hash == input_key_column_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> FindDeletedRecords\nCheckIfAlreadyInHist derive(curr_ind = 0) ~> ChangeCurrentFlag\nRenameActive alterRow(updateIf(true())) ~> UpdateDimCurrentInd\nActiveSplit@ActiveColumns, HashInputKeyColumns exists((target_key_column_hash == input_key_column_hash) && (target_nonkey_columns_hash != input_nonkey_columns_hash),\n\tnegate:false,\n\tbroadcast: 'auto')~> CheckNonKeyColumnChange\nRemap1 alterRow(insertIf(true())) ~> InsertToHistTable\nInsertToHistTable, InsertActiveChnaged, InsertRemovedToHist union(byName: true)~> UnionForHist\nMarkForInsert, Update union(byName: true)~> DimTable\nUpdateOrInsertSplit@Update, UpdateDimCurrentInd union(byName: true)~> UpdateTarget\nHashTargetKeyColumns split(equals(toString(byName($df_trgt_active_column_name)), '1'),\n\tdisjoint: false) ~> ActiveSplit@(ActiveColumns, InActiveColumns)\nActiveSplit@InActiveColumns, HashInputKeyColumns exists((target_key_column_hash === input_key_column_hash),\n\tnegate:false,\n\tbroadcast: 'auto')~> CheckIfExists\nRemap2 alterRow(insertIf(true())) ~> InsertActiveChnaged\nRemoveTechnicalColumnsFromSrc derive(process_id = $df_log_process_id,\n\t\tprocess_date = currentUTC(),\n\t\tvalid_to = currentUTC()) ~> AddProcessData\nMarkUpdate select(mapColumn(\n\t\teach(match(!in(['curr_ind','skid','active'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nCheckNonKeyColumnChange, GetLastValidDate join(target_key_column_hash == input_key_column_hash,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinToHist\nRenameColumn aggregate(groupBy(input_key_column_hash = md5(byNames(split($df_trgt_key_column_list,',')))),\n\tvalid_to_last = max(byName(concat($df_scd_end_date_column_name,'_last')))) ~> GetLastValidDate\nJoinToHist derive(valid_to_merged = coalesce(toTimestamp(byName(concat('valid_to_last'))),toTimestamp('1900-01-01 00:00:00'))) ~> SetValidFrom\nCheckIfExists, GetLastValidDate join(target_key_column_hash == input_key_column_hash,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinToHist2\nJoinToHist2 derive(valid_to_merged = coalesce(toTimestamp(byName(concat('valid_to_last'))),toTimestamp('1900-01-01 00:00:00'))) ~> SetValidFrom2\nFindDeletedRecords, GetLastValidDate exists(target_key_column_hash == input_key_column_hash &&\r\n byName($df_trgt_active_column_name) == '0',\n\tnegate:true,\n\tbroadcast: 'auto')~> CheckIfAlreadyInHist\nRemap3 alterRow(insertIf(true())) ~> InsertRemovedToHist\nCheckIfAlreadyInHist, GetLastValidDate join(target_key_column_hash == input_key_column_hash,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinToHist3\nDimHist select(mapColumn(\n\t\teach(match(name==$df_scd_end_date_column_name),\n\t\t\tconcat($df_scd_end_date_column_name,'_last') = $$),\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumn\nChangeCurrentFlag select(mapColumn(\n\t\teach(match(name=='curr_ind'),\n\t\t\t$df_trgt_active_column_name = $$),\n\t\teach(match(name=='process_id'),\n\t\t\t$df_log_process_id_column_name = $$),\n\t\teach(match(name=='process_date'),\n\t\t\t$df_log_process_date_column_name = $$),\n\t\teach(match(name == 'valid_to'),\n\t\t\t$df_scd_end_date_column_name = $$),\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameActive\nSetValidFrom select(mapColumn(\n\t\teach(match(name=='valid_to_merged'),\n\t\t\t$df_scd_begin_date_column_name = $$),\n\t\teach(match(name=='process_id'),\n\t\t\t$df_log_process_id_column_name = $$),\n\t\teach(match(name=='process_date'),\n\t\t\t$df_log_process_date_column_name = $$),\n\t\teach(match(name=='valid_to'),\n\t\t\t$df_scd_end_date_column_name = $$),\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Remap1\nSetValidFrom2 select(mapColumn(\n\t\teach(match(name=='valid_to_merged'),\n\t\t\t$df_scd_begin_date_column_name = $$),\n\t\teach(match(name=='valid_to'),\n\t\t\t$df_scd_end_date_column_name = $$),\n\t\teach(match(name=='process_date'),\n\t\t\t$df_log_process_date_column_name = $$),\n\t\teach(match(name=='process_id'),\n\t\t\t$df_log_process_id_column_name = $$),\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Remap2\nSetValidFrom3 select(mapColumn(\n\t\teach(match(name=='valid_to_merged'),\n\t\t\t$df_scd_begin_date_column_name = $$),\n\t\teach(match(name=='valid_to'),\n\t\t\t$df_scd_end_date_column_name = $$),\n\t\teach(match(name=='process_id'),\n\t\t\t$df_log_process_id_column_name = $$),\n\t\teach(match(name=='process_date'),\n\t\t\t$df_log_process_date_column_name = $$),\n\t\teach(match(true()))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Remap3\nJoinToHist3 derive(valid_to_merged = coalesce(toTimestamp(byName(concat('valid_to_last'))),toTimestamp('1900-01-01 00:00:00'))) ~> SetValidFrom3\nDimTable select(mapColumn(\n\t\teach(match(!(endsWith(name,'hash'))&&!in(['valid_to','process_id','process_date','target_skid_hash','target_nonkey_columns_hash','target_key_column_hash','max_surrogate_key','curr_ind','input_nonkey_columns_hash','input_key_column_hash','input_nonkey_columns_hash'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveTechnicalColumns\nUpdateTarget select(mapColumn(\n\t\teach(match(!(endsWith(name,'hash'))&&!in(['valid_to','skid_hash','skid','target_skid_hash','target_nonkey_columns_hash','target_key_column_hash','max_surrogate_key','input_skid_hash','input_nonkey_columns_hash','input_key_column_hash','input_nonkey_columns_hash'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nUnionForHist select(mapColumn(\n\t\teach(match(!(endsWith(name,'hash'))&&!in(['valid_to','skid','max_surrogate_key','valid_to_last','valid_to_merged','process_id','process_date'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveTechnicalColumn2\nTargetObject select(mapColumn(\n\t\teach(match(!in(['idm_valid_to_date','idm_process_date','idm_process_id'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveTechnicalColumnsFromSrc\nRemoveTechnicalColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:(split($df_trgt_key_column_list,',')),\n\tformat: 'table',\n\tstagingSchemaName: 'STG',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TargetObjectInsertSink\nRemoveTechnicalColumn2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HistTable"
		}
	}
}