{
	"name": "Standardization_Data_Flow_without_SKID_assignment_and_without_truncate",
	"properties": {
		"description": "Data Flow used for standardization of target object without SKID assignment process and without truncate target table option",
		"folder": {
			"name": "DataFlows/STD/"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm_parametrized",
						"type": "DatasetReference"
					},
					"name": "TargetObject"
				},
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm",
						"type": "DatasetReference"
					},
					"name": "InputDataForInsert"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sqlserver_idm_parametrized",
						"type": "DatasetReference"
					},
					"name": "TargetObjectSink"
				}
			],
			"transformations": [
				{
					"name": "HashTargetKeyColumns"
				},
				{
					"name": "HashInputKeyColumns"
				},
				{
					"name": "NewRows"
				},
				{
					"name": "DropTechnicalColumnsInput"
				},
				{
					"name": "MarkForInsert"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "GetKeyAndHash"
				},
				{
					"name": "ExistingRows"
				},
				{
					"name": "UpdatedRows"
				},
				{
					"name": "JoinToTarget"
				},
				{
					"name": "PrepareStructureForUpdate"
				},
				{
					"name": "MarkForUpdate"
				},
				{
					"name": "AddTechnicalColumns"
				},
				{
					"name": "RenameTechnicalColumns"
				}
			],
			"script": "parameters{\n\tdf_trgt_object_skid as integer,\n\tdf_trgt_key_column_list as string,\n\tdf_trgt_non_key_column_list as string,\n\tdf_trgt_schema_name as string,\n\tdf_trgt_table_name as string,\n\tdf_std_sql_query as string,\n\tdf_log_process_date_column_name as string,\n\tdf_active_column_name as string,\n\tdf_log_process_id as long,\n\tdf_scd_end_date_column_name as string,\n\tdf_log_process_id_column_name as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TargetObject\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_COMMITTED',\n\tquery: ($df_std_sql_query),\n\tformat: 'query') ~> InputDataForInsert\nTargetObject derive(target_skid_hash = md5(byNames(split($df_trgt_key_column_list,','))),\n\t\ttarget_nonkey_columns_hash = md5(byNames(split($df_trgt_non_key_column_list,',')))) ~> HashTargetKeyColumns\nInputDataForInsert derive(input_skid_hash = md5(byNames(split($df_trgt_key_column_list,','))),\n\t\tinput_nonkey_columns_hash = md5(byNames(split($df_trgt_non_key_column_list,',')))) ~> HashInputKeyColumns\nHashInputKeyColumns, HashTargetKeyColumns exists(input_skid_hash == target_skid_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRows\nNewRows select(mapColumn(\n\t\teach(match(!in(['input_skid_hash','input_nonkey_columns_hash','MaxSurrogateKey','skid'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropTechnicalColumnsInput\nDropTechnicalColumnsInput alterRow(insertIf(true())) ~> MarkForInsert\nMarkForInsert, MarkForUpdate union(byName: true)~> UnionAllData\nHashTargetKeyColumns select(mapColumn(\n\t\ttarget_skid_hash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> GetKeyAndHash\nHashInputKeyColumns, HashTargetKeyColumns exists(input_skid_hash == target_skid_hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistingRows\nExistingRows, HashTargetKeyColumns exists(input_skid_hash == target_skid_hash\n\t&& input_nonkey_columns_hash == target_nonkey_columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> UpdatedRows\nUpdatedRows, GetKeyAndHash join(input_skid_hash == target_skid_hash,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinToTarget\nJoinToTarget select(mapColumn(\n\t\teach(match(!in(['target_skid_hash','input_skid_hash','input_nonkey_columns_hash'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> PrepareStructureForUpdate\nPrepareStructureForUpdate alterRow(updateIf(true())) ~> MarkForUpdate\nUnionAllData derive(log_process_id = toLong($df_log_process_id),\n\t\tcurr_ind = toInteger(1),\n\t\tvalid_to = toTimestamp('9999-01-01 00:00:00.0000000'),\n\t\tprocess_date = currentTimestamp()) ~> AddTechnicalColumns\nAddTechnicalColumns select(mapColumn(\n\t\teach(match(!in(['valid_to','log_process_id','curr_ind','process_date'],name))),\n\t\teach(match(name=='log_process_id'),\n\t\t\t$df_log_process_id_column_name = $$),\n\t\teach(match(name=='curr_ind'),\n\t\t\t$df_active_column_name = $$),\n\t\teach(match(name=='valid_to'),\n\t\t\t$df_scd_end_date_column_name = $$),\n\t\teach(match(name=='process_date'),\n\t\t\t$df_log_process_date_column_name = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameTechnicalColumns\nRenameTechnicalColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:(split($df_trgt_key_column_list,',')),\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> TargetObjectSink"
		}
	}
}